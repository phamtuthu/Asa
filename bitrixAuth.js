const axios = require("axios");

// Bi·∫øn l∆∞u token
let accessToken = "";
let refreshToken = process.env.BITRIX_REFRESH_TOKEN;

// üîÑ H√†m refresh access token b·∫±ng refresh token
async function refreshAccessToken() {
    try {
        const response = await axios.get(`${process.env.BITRIX_DOMAIN}/oauth/token/`, {
            params: {
                grant_type: "refresh_token",
                client_id: process.env.BITRIX_CLIENT_ID,
                client_secret: process.env.BITRIX_CLIENT_SECRET,
                refresh_token: refreshToken,
            },
        });

        accessToken = response.data.access_token;
        refreshToken = response.data.refresh_token; // C·∫≠p nh·∫≠t refresh token m·ªõi
        console.log("üîÑ Token refreshed successfully!");
    } catch (error) {
        console.error("‚ùå Error refreshing token:", error.response?.data || error.message);
        throw new Error("Failed to refresh token");
    }
}

// ‚úÖ Middleware ƒë·∫£m b·∫£o c√≥ token h·ª£p l·ªá tr∆∞·ªõc khi g·ªçi API
async function ensureValidToken() {
    if (!accessToken) {
        await refreshAccessToken();
    }
    return accessToken;
}

// üìå H√†m g·ª≠i request t·ªõi Bitrix24 API
async function bitrixRequest(method, endpoint, data = {}) {
    try {
        const token = await ensureValidToken(); // ƒê·∫£m b·∫£o token h·ª£p l·ªá

        const url = `${process.env.BITRIX_DOMAIN}/rest/${endpoint}`;

        const response = await axios({
            method,
            url,
            data,
            params: { auth: token },
        });

        return response.data;
    } catch (error) {
        console.error("‚ùå Bitrix API error:", error.response?.data || error.message);
        throw error;
    }
}

// ‚úÖ Export ƒë√∫ng
module.exports = bitrixRequest;
